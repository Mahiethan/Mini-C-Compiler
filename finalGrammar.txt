programStart ::= program $

program ::= extern_list decl_list 
           | decl_list

extern_list ::= extern extern_list' 

extern_list' ::= extern_list | epsilon

extern ::= "extern" type_spec IDENT "(" params ")" ";"   

type_spec ::= "void"
             |  var_type

decl_list ::= decl decl_list'

decl_list' ::= decl_list | epsilon

var_type  ::= "int" |  "float" |  "bool"

decl ::= var_type IDENT decl' | "void" IDENT "(" params ")" block    

decl' ::= ";" | "(" params ")" block      

params ::= param_list  
          |  "void" | epsilon

param_list ::= param param_list'

param_list' ::= "," param_list | epsilon

param ::= var_type IDENT

block ::= "{" local_decls stmt_list "}"

local_decls ::= local_decl local_decls | epsilon

local_decl ::= var_type IDENT ";" 

stmt_list ::= stmt stmt_list | epsilon      

stmt ::= expr_stmt 
        |  block 
        |  if_stmt 
        |  while_stmt 
        |  return_stmt

expr_stmt ::= expr ";" 
             |  ";"

while_stmt ::= "while" "(" expr ")" stmt 

if_stmt ::= "if" "(" expr ")" block else_stmt 

else_stmt  ::= "else" block           
              |  epsilon            

return_stmt ::= "return" return_stmt' 

return_stmt' ::= ";" | expr ";" 

exprStart ::= IDENT "=" exprStart | epsilon  

expr ::= exprStart rval_eight

rval_eight ::= rval_seven rval_eight'

rval_eight' ::= "||" rval_seven rval_eight'  
        | epsilon

rval_seven ::= rval_six rval_seven'

rval_seven' ::= "&&" rval_six rval_seven'  
        | epsilon

rval_six ::= rval_five rval_six'

rval_six' ::= "==" rval_five rval_six'  
        | "!=" rval_five rval_six' 
        | epsilon

rval_five ::= rval_four rval_five'

rval_five' ::= "<=" rval_four rval_five' 
        | "<" rval_four rval_five'
        | ">=" rval_four rval_five'
        | ">" rval_four rval_five'
        | epsilon

rval_four ::= rval_three rval_four'

rval_four' ::= "+" rval_three rval_four' 
        | "-" rval_three rval_four'
        | epsilon

rval_three ::= rval_two rval_three'

rval_three' ::= "*" rval_two rval_three' 
        | "/" rval_two rval_three'
        | "%" rval_two rval_three'
        | epsilon

rval_two ::= "-" rval_two 
        | "!" rval_two
        | rval_one

rval_one ::= "(" expr ")"
        | IDENT rval
        | INT_LIT | FLOAT_LIT | BOOL_LIT 

rval ::= "(" args ")" | epsilon

args ::= arg_list 
        |  epsilon

arg_list ::= expr arg_list'

arg_list' ::= "," arg_list | epsilon