### - finished
# - not sure if correct
~ - unchanged

~ program ::= extern_list decl_list 
           | decl_list
-------------------------------------------------
extern_list ::= extern_list extern
               |  extern

//////////////////////////////////////////////// Removing left recursion

extern_list ::= extern extern_list'
extern_list' ::= extern extern_list' | epsilon

//////////////////////////////////////////////// Removing epsilon production

extern_list ::= extern extern_list'
extern_list' ::= extern extern_list' | extern

extern_list ::= extern extern_list | extern 

//////////////////////////////////////////////// Left factoring

# extern_list ::= extern extern_list' 
# extern_list' ::= extern_list | epsilon

-------------------------------------------------

~ extern ::= "extern" type_spec IDENT "(" params ")" ";"

-------------------------------------------------

 decl_list ::= decl_list decl
             |  decl

///////////////////////////////////////////////// Removing left recursion

dec_list ::= decl decl_list'
dec_list' ::= decl decl_list' | epsilon

//////////////////////////////////////////////// Removing epsilon production

dec_list ::= decl decl_list'
dec_list' ::= decl decl_list' | decl

decl_list ::= decl decl_list | decl

//////////////////////////////////////////////// Left factoring

# decl_list ::= decl decl_list'
# decl_list' ::= decl_list | epsilon

-------------------------------------------------

~ decl ::= var_decl 
        |  fun_decl

-------------------------------------------------

~ var_decl ::= var_type IDENT ";" 

-------------------------------------------------

~ type_spec ::= "void"
             |  var_type

-------------------------------------------------

~ var_type  ::= "int" |  "float" |  "bool"

-------------------------------------------------

~ fun_decl ::= type_spec IDENT "(" params ")" block

-------------------------------------------------

~ params ::= param_list  
          |  "void" | epsilon

-------------------------------------------------

param_list ::= param_list "," param 
              |  param

//////////////////////////////////////////////// Removing left recursion

param_list ::= param param_list'
param_list' ::= "," param param_list' | epsilon

//////////////////////////////////////////////// Removing epsilon production

param_list ::= param param_list'
param_list' ::= "," param param_list' | "," param

param_list ::= param "," param_list'
param_list' ::= param "," param_list' | param

param_list ::= param "," param_list | param

//////////////////////////////////////////////// Left factoring

# param_list ::= param param_list'
# param_list' ::= "," param_list | epsilon

-------------------------------------------------

~ param ::= var_type IDENT

-------------------------------------------------

~ block ::= "{" local_decls stmt_list "}"

-------------------------------------------------

local_decls ::= local_decls local_decl
               |  epsilon

//////////////////////////////////////////////// Removing left recursion

local_decls ::= epsilon local_decls'
local_decls' ::= local_decl local_decls' | epsilon

local_decls ::= local_decls'
local_decls' ::= local_decl local_decls' | epsilon

### local_decls ::= local_decl local_decls | epsilon

--------------------------------------------------

~ local_decl ::= var_type IDENT ";"

--------------------------------------------------

stmt_list ::= stmt_list stmt 
             |  epsilon

//////////////////////////////////////////////// Removing left recursion

stmt_list ::= epsilon stmt_list'
stmt_list' ::= stmt stmt_list' | epsilon

stmt_list ::= stmt_list'
stmt_list' ::= stmt stmt_list' | epsilon

### stmt_list ::= stmt stmt_list | epsilon

--------------------------------------------------

~ stmt ::= expr_stmt 
        |  block 
        |  if_stmt 
        |  while_stmt 
        |  return_stmt

--------------------------------------------------

~ expr_stmt ::= expr ";" 
             |  ";"

--------------------------------------------------

~ while_stmt ::= "while" "(" expr ")" stmt

--------------------------------------------------

~ if_stmt ::= "if" "(" expr ")" block else_stmt

--------------------------------------------------

~ else_stmt  ::= "else" block
              |  epsilon

--------------------------------------------------

return_stmt ::= "return" ";" 
               |  "return" expr ";"

//////////////////////////////////////////////// Left factoring

# return_stmt ::= "return" return_stmt' 
# return_stmt' ::= ";" | expr ";"

--------------------------------------------------
--------------------------------------------------

~ expr ::= IDENT "=" expr
        | rval

--------------------------------------------------

rval ::= rval "||" rval                                              
        | rval "&&" rval                                             
        | rval "==" rval | rval "!=" rval                            
        | rval "<=" rval | rval "<" rval | rval ">=" rval | rval ">" rval
        | rval "+" rval  | rval "-" rval
        | rval "*" rval  | rval "/" rval  | rval "%" rval
        | "-" rval | "!" rval
        | "(" expr ")"
        | IDENT | IDENT "(" args ")" 
        | INT_LIT | FLOAT_LIT | BOOL_LIT 

//////////////////////////////////////////////// Removing left recursion


# rval ::= INT_LIT rval' | FLOAT_LIT rval' | BOOL_LIT rval'
        | IDENT rval' | IDENT "(" args ")" rval'
        | "(" expr ")" rval' 
        | "-" rval rval' | "!" rval rval'
        

# rval' ::= "*" rval rval' | "/" rval rval' | "%" rval rval'
        | "+" rval rval'  | "-" rval rval'
        | "<=" rval rval' | "<" rval rval' | ">=" rval rval' | ">" rval rval'
        | "==" rval rval' | "!=" rval rval' 
        | "&&" rval rval'
        | "||" rval  rval'
        | epsilon

--------------------------------------------------

~ args ::= arg_list 
        |  epsilon

--------------------------------------------------

arg_list ::= arg_list "," expr
        |  expr

//////////////////////////////////////////////// Removing left recursion

arg_list ::=  expr arg_list'
arg_list' ::= "," expr arg_list' | epsilon

//////////////////////////////////////////////// Removing epsilon production

arg_list ::=  expr arg_list'
arg_list' ::= "," expr arg_list' | "," expr

arg_list ::= expr "," arg_list  | expr

//////////////////////////////////////////////// Left factoring

# arg_list ::= expr arg_list'
# arg_list' ::= "," arg_list | epsilon
